<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on 子不语</title>
    <link>https://ddou.github.io/tags/test/</link>
    <description>Recent content in Test on 子不语</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Mar 2014 22:44:00 +0800</lastBuildDate><atom:link href="https://ddou.github.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RSpec优雅验证之Predicate Matcher</title>
      <link>https://ddou.github.io/posts/meaningful-rspec-predicate/</link>
      <pubDate>Sat, 08 Mar 2014 22:44:00 +0800</pubDate>
      
      <guid>https://ddou.github.io/posts/meaningful-rspec-predicate/</guid>
      <description>Ruby 作为动态语言，以其灵活性在测试领域大放异彩。RSpec 作为 Ruby 中使用最广泛的测试工具之一，实在是广大码农们居家旅行测试验证之必备神器。RSpec 提供了强大灵活的验证器(mather)，使用这些验证器加上 Ruby 灵活的语法可以写出类似于自然语言的验证，例如：
result_list.should include(item) result.should equal(item) person.name.should == &amp;#39;ddou&amp;#39; 上述验证写法自然看起来赏心悦目，但如下的写法就太不 ruby 了，估计 rubyist 看到了多少会有些反胃：
person.manager?.should be_true detail_view.toggleable?.should == true detail_view.has_photo?.should == true 对于上述验证，一个 rubyist 所喜闻乐见的验证写法应该是这样的：
person.should be_manager detail_view.should be_toggleable detail_view.should have_photo 这样的写法是不是看起来更自然，更符合人类自然语言的习惯？强大如 RSpec 者自然支持上述语法。RSpec 提供了对 Predicate Matcher 的支持，即可以使用被验证对象自身提供的 predicate 方法作为验证器。 常见的 predicate 方法如 Array.empty?，以及我们上面例子中的 Person.manager?，DetailView.toggleable?，DetailView.has_photo?等。
Predicate Matcher 实现 下面我们就打开 RSpec 源码，看看 Predicate Matcher 是如何实现。
上例中我们并没有定义 be_manager，be_toggleable 方法，RSpec 自然要依赖 Ruby 的强大元编程能力来实现魔法。打开 rspec-expectation 包下 lib/rspec/matchers/method_missing.rb 文件，我们可以看到如下逻辑：</description>
    </item>
    
  </channel>
</rss>
