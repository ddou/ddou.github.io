<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Translation on 子不语</title>
    <link>https://ddou.github.io/tags/translation/</link>
    <description>Recent content in Translation on 子不语</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 May 2017 23:58:10 +0800</lastBuildDate>
    
	<atom:link href="https://ddou.github.io/tags/translation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[译文]再谈CAP理论</title>
      <link>https://ddou.github.io/posts/cap-theorem-revisited-translation/</link>
      <pubDate>Tue, 09 May 2017 23:58:10 +0800</pubDate>
      
      <guid>https://ddou.github.io/posts/cap-theorem-revisited-translation/</guid>
      <description>最近在看分布式相关文章时，偶遇该篇文章，文章虽简短，但分析透彻, 故译来与大家分享，希望能读者有帮助。
译文如下
当今技术领域，我们经常碰到这样一种情况：希望通过增加额外的资源，如（计算能力，存储等）来横向扩展系统，以期能成功在合理的时间内完成请求处理。这是通过给系统添加商用硬件（commodity hardware）来应对不断增加的负载。该扩展策略导致的一个问题就是系统复杂度升高。该场景下 CAP 理论就要起作用了。
CAP 理论陈述如下： 在一个分布式系统中(一个由多个共享数据又互相连接的计算机节点组成的系统)，对于一次数据读/写操作对，只能得到如下三个保证中的两个： 一致性，可用性，分区容错性， 其中之一必然被牺牲。
 The CAP Theorem states that, in a distributed system (a collection of interconnected nodes that share data.), you can only have two out of the following three guarantees across a write/read pair: Consistency, Availability, and Partition Tolerance - one of them must be sacrificed.
 如下图所示，我们并没有太多选择：
 一致性  对于一个给定的客户端，一次读操作总是确保返回最近一次写操作。
 可用性  一个正常工作的节点总是在合理的时间范围内返回合理的响应。
 分区容错性  当出现网络分区时，系统也可以继续工作。</description>
    </item>
    
  </channel>
</rss>